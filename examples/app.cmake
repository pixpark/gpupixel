# 侦测操作系统
IF(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	# 以操作系统名称作为编译输出、安装目录
    SET(MY_SYSTEM "linux")
	
ELSEIF(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
	# 以操作系统名称作为编译输出、安装目录
    SET(MY_SYSTEM "windows")
ELSEIF(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
	SET(MY_SYSTEM "linux")
ELSE()
    MESSAGE(FATAL_ERROR "NOT SUPPORT THIS SYSTEM")
ENDIF()

# 设置编译结果的输出、安装路径
SET(MY_INSTALL_PATH "${CMAKE_CURRENT_SOURCE_DIR}/../output")
SET(CMAKE_INCLUDE_OUTPUT_DIRECTORY "${MY_INSTALL_PATH}/include")
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${MY_INSTALL_PATH}/library/${MY_SYSTEM}")
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${MY_INSTALL_PATH}/library/${MY_SYSTEM}")
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${MY_INSTALL_PATH}/bin/${MY_SYSTEM}")
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG   ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}/debug)
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG   ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/debug)
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG   ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/debug)
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}/release)
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE ${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/release)
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/release)

# 引入头文件的路径
INCLUDE_DIRECTORIES(
	${CMAKE_CURRENT_SOURCE_DIR}/linux
	${CMAKE_CURRENT_SOURCE_DIR}/linux/include()
	${CMAKE_CURRENT_SOURCE_DIR}/../src/third_party/glfw/include
	${CMAKE_INCLUDE_OUTPUT_DIRECTORY}
)

IF(MY_DEBUG)
	# 编译 Debug 版本
	SET(CMAKE_BUILD_TYPE Debug)
	
	# 引入动态库的路径
	LINK_DIRECTORIES("/opt/homebrew/Cellar/glfw/3.3.9/lib")
	LINK_DIRECTORIES(${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/debug)
ELSE()
	# 编译 Release 版本
	SET(CMAKE_BUILD_TYPE Release)
	
	# 引入动态库的路径
	LINK_DIRECTORIES(${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/release)
ENDIF(MY_DEBUG)

# 参与编译的源文件
FILE(GLOB SOURCE_FILES 
     "${CMAKE_CURRENT_SOURCE_DIR}/linux/*"    
     "${CMAKE_CURRENT_SOURCE_DIR}/linux/src/*"    
     )

# 编译出动态链接库
ADD_EXECUTABLE(${PROJECT_NAME} ${SOURCE_FILES})


# 依赖的第三方库
IF(${MY_SYSTEM} STREQUAL "linux")

TARGET_LINK_LIBRARIES(${PROJECT_NAME} gpupixel glfw)
ELSEIF(${MY_SYSTEM} STREQUAL "windows")
TARGET_LINK_LIBRARIES(${PROJECT_NAME} gpuixel.lib)
ENDIF()

